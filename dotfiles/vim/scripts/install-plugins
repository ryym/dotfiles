#!/usr/bin/env node

// A small script to clone repsotiries in parallel.

const cp = require('child_process');
const fs = require('fs');
const path = require('path');

const startJob = ctx => plugin => {
  return updateRepo(ctx, plugin).then(handleFinish(ctx));
};

const updateRepo = async (ctx, plugin) => {
  try {
    log('clone', plugin.name, plugin.url);

    const repoPath = path.join(ctx.rootDir, plugin.name);
    await rmDir(repoPath);
    await gitClone(plugin.url, repoPath);

    log('end', plugin.name);
    return { plugin };
  } catch (err) {
    log('error', plugin.name, err);
    return { plugin, err };
  }
};

const handleFinish = ctx => result => {
  if (result.err) {
    ctx.handleError(result);
  }
  if (ctx.remaining()) {
    return startJob(ctx)(ctx.nextPlugin());
  }
};

class JobContext {
  constructor(rootDir, plugins, { idx }) {
    this.rootDir = rootDir;
    this.plugins = plugins;
    this.idx = idx;
    this.errors = {};
  }

  remaining() {
    return this.idx <= this.plugins.length - 1;
  }

  nextPlugin() {
    const plugin = this.plugins[this.idx];
    this.idx += 1;
    return plugin;
  }

  handleError({ plugin, err }) {
    this.errors[plugin.name] = err;
  }
}

const main = async (rootDir, plugins) => {
  if (!fs.existsSync(rootDir)) {
    throw new Error(`root directory ${rootDir} does not exist`);
  }

  const maxWorkers = 8;
  const targets = plugins.slice(0, maxWorkers);
  const ctx = new JobContext(rootDir, plugins, { idx: maxWorkers });
  await Promise.all(targets.map(startJob(ctx)));
  return ctx;
};

const spawn = (cmd, args, opt) => {
  return new Promise((resolve, reject) => {
    let err = '';

    const p = cp.spawn(cmd, args || [], {
      stdio: ['ignore', 'ignore', 'pipe'],
      ...opt,
    });

    p.stderr.on('data', data => {
      err += String(data);
    });

    p.on('close', code => {
      if (code === 0) {
        resolve();
      } else {
        reject({ message: err.trim() });
      }
    });
  });
};

// (todo) Support Windows if necessary.
const rmDir = dir => {
  if (fs.existsSync(dir)) {
    return spawn('rm', ['-rf', dir]);
  }
  return Promise.resolve();
};

const gitClone = (url, dir) => {
  return spawn('git', ['clone', '--depth', 1, url, dir]);
};

const log = (...values) => {
  if (isDebug) {
    console.log(...values);
  }
};

/* --------------------------------------------------------- */

if (process.argv.length !== 3) {
  throw new Error('Pass all arguments as a JSON string');
}

const arg = JSON.parse(process.argv[2]);
const isDebug = arg.is_debug;
const plugins = arg.plugins;

let rootDir = arg.root_dir;
if (!rootDir.startsWith('/')) {
  rootDir = path.resolve(process.cwd(), rootDir);
}

log('arg', arg);

main(rootDir, plugins).then(ctx => {
  if (Object.keys(ctx.errors).length > 0) {
    console.error(JSON.stringify(ctx.errors));
    process.exitCode = 1;
  }
});
