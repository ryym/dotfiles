# ZSHRC
# man zsh

export LANG=en_US.UTF-8

bindkey -e # Like Emacs.

autoload -Uz colors
colors

autoload -U compinit
compinit

# Use completion with case-insensitivity.
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Histories
HISTFILE=~/.zsh_history
HISTSIZE=500000 # メモリにロードされる件数(検索できる)
SAVEHIST=500000 # $HISTFILEに保存される件数

# History searching
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# vcs_info
autoload -Uz vcs_info
autoload -Uz add-zsh-hook
zstyle ':vcs_info:*' formats '%F{blue}(%b)%f'
zstyle ':vcs_info:*' actionformats '%F{red}(%b|%a)%f'

function _update_vcs_info_msg() {
    LANG=en_US.UTF-8 vcs_info
    PROMPT="%{${fg[green]}%}[%n@%m] ${vcs_info_msg_0_}%{${reset_color}%} %~
%# "
}
add-zsh-hook precmd _update_vcs_info_msg

PROMPT="%{${fg[green]}%}[%n@%m]%{${reset_color}%} %~
%# "

setopt hist_ignore_dups
setopt share_history

# Options

setopt auto_cd
setopt auto_pushd

setopt nocorrect
setopt list_packed
setopt nolistbeep

unsetopt nomatch

# Aliases
alias ls='ls -GF'
alias ll='ls -lGF'
alias la='ls -laGF'
alias g='git'
alias reload='exec $SHELL -l'
alias v='vim'
alias vi='vim'
alias gvi='gvim'
alias dk='docker'
alias dkc='docker-compose'
alias be='bundle exec'
alias npmr='npm run'
alias cg='cargo'
alias manv='() { vim -c "exe \"PluggerLoad man\" | Man $1 | only" }'

## FZF
export FZF_DEFAULT_OPTS="-i --cycle --reverse --bind=ctrl-k:kill-line,space:toggle+down,ctrl-s:select-all,ctrl-d:deselect-all"

# Make fzf super faster
# - https://github.com/junegunn/fzf#respecting-gitignore
# - https://github.com/sharkdp/fd
export FZF_DEFAULT_COMMAND="fd --hidden --no-ignore"

# http://qiita.com/strsk/items/9151cef7e68f0746820d
# http://qiita.com/udzura/items/3f120b5e4733fe85078d
function fzf-src() {
    local selected_dir=$(eval "$1" | fzf --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}

function fzf-ghq() {
    fzf-src 'ghq list -p'
}
zle -N fzf-ghq
bindkey '^]' fzf-ghq

function fzf-gopath() {
    fzf-src 'gits -p $GOPATH/src'
}
zle -N fzf-gopath
bindkey '^g' fzf-gopath

# https://github.com/direnv/direnv
if has direnv; then
    eval "$(direnv hook zsh)"
fi

# AWS-CLI
# which aws_zsh_completer >/dev/null 2>&1 && $(which aws_zsh_completer.sh)

# Load local settings.
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# Use fzf to git-add/checkout files interactively.
gitfunc_add_interactive() {
    local output=$( \
        git status --short | grep -E '^\sM|^\?' | fzf --multi \
            --expect 'ctrl-o' \
            --bind 'ctrl-d:execute(git diff --color=always {2} | less -R > /dev/tty)' \
            --bind 'ctrl-e:execute(vim {2} < /dev/tty > /dev/tty)' \
            --preview 'test {1} = "??" && (test -d {2} && ls -Al {2} || bat --plain --color=always {2}) || git diff --color=always {2}'
    );
    local selected=$(echo "$output" | sed '1,1d' | awk '{print $2}')
    if test "$output"; then
        case $(head -n 1 <<< "$output") in
            ctrl-o) git checkout $(echo "$selected") ;;
            *) git add $(echo "$selected") ;;
        esac;
        git status;
    fi
}

# Use fzf to git-reset files interactively.
gitfunc_reset_interactive() {
    local output=$( \
        git status --short | grep -E '^M|^A' | fzf --multi \
            --expect 'ctrl-h'
            --bind 'ctrl-d:execute(git diff --cached --color=always {2} | less -R > /dev/tty)' \
            --bind 'ctrl-e:execute(vim {2} < /dev/tty > /dev/tty)' \
            --preview 'test {1} = "A" && bat --plain --color=always {2} || git diff --cached --color=always {2}'
    );
    local selected=$(echo "$output" | sed '1,1d' | awk '{print $2}')
    if test "$output"; then
        case $(head -n 1 <<< "$output") in
            # reset --hard by ctrl-h?
            *) git reset $(echo "$selected") ;;
        esac;
        git status;
    fi
}
