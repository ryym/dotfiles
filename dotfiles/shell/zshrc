# ZSHRC
# man zsh

export LANG=en_US.UTF-8
export LESS='-F -R --ignore-case'

bindkey -e # Like Emacs.

# Remap <C-w> to <C-t> to use <C-w> for window switching in Vim terminal.
bindkey "^t" backward-kill-word

autoload -Uz colors
colors

autoload -U compinit
compinit

# Use completion with case-insensitivity.
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Histories
HISTFILE=~/.zsh_history
HISTSIZE=500000 # メモリにロードされる件数(検索できる)
SAVEHIST=500000 # $HISTFILEに保存される件数

# History searching
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# vcs_info
autoload -Uz vcs_info
autoload -Uz add-zsh-hook
zstyle ':vcs_info:*' formats '%F{green}%b%f'
zstyle ':vcs_info:*' actionformats '%F{green}%b%f %F{red}%a%f'

# A prompt inspired by https://github.com/sindresorhus/pure
_is_first_prompt=1
function _update_prompt() {
    local symbol_color=$([[ $? == 0 ]] && echo 'cyan' || echo 'magenta')
    if [[ $_is_first_prompt == 1 ]]; then
        _is_first_prompt=0
    else
        print ''
    fi
    LANG=en_US.UTF-8 vcs_info
    local ssh_info=$(test -z "$SSH_CLIENT" && echo '' || echo '(SSH)')
    # Use as a jump marker in tmux's copy-mode.
    local prompt_sequence=$'\033]133;A\033\\'
    PROMPT="$prompt_sequence%F{246}%~%f ${vcs_info_msg_0_}
%F{$symbol_color}❯%f "
}
add-zsh-hook precmd _update_prompt

# Shorten long and frequently used paths.
hash -d github=$HOME/ghq/src/github.com

setopt hist_ignore_all_dups
setopt share_history

# Options

setopt auto_cd
setopt auto_pushd

setopt nocorrect
setopt list_packed
setopt nolistbeep
setopt interactivecomments

unsetopt nomatch

source "$DOTPATH/dotfiles/shell/aliases"

source "$DOTPATH/dotfiles/fzf/config.sh"

zkbd_file="$HOME/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}"
if [ -f $zkbd_file ]; then
    # Load a dictionary of special keys for the current terminal.
    # You can build a directory interactively by running `autoload zkbd; zkbd`.
    source $zkbd_file

    # Remap navigation keys to ensure consistent behavior across applications.
    # See ryym/dotfiles/sync/os/arch/README.md#key-binding-strategy for details.
    # While these bindings are rarely used since they are remapped at the terminal emulator level,
    # they are still useful in terminals that doesn't remap keys like tty1.
    bindkey "${key[Home]}" beginning-of-line
    bindkey "${key[End]}" end-of-line
    bindkey "${key[Up]}" history-beginning-search-backward-end
    bindkey "${key[Down]}" history-beginning-search-forward-end
fi

# https://github.com/rhysd/hgrep
function hgrep() {
    command hgrep --term-width "$COLUMNS" "$@"
}

# https://github.com/direnv/direnv
if has direnv; then
    eval "$(direnv hook zsh)"
fi

# AWS-CLI
# which aws_zsh_completer >/dev/null 2>&1 && $(which aws_zsh_completer.sh)

# Load local settings.
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
