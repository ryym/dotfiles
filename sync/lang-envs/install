#!/usr/bin/env bash

# We often need to manage multiple versions of some programming languages.
# Currently we use anyenv to manage tools that manages multiple versions of a language.

set -eu
trap 'echo SYNC STOPPED: $0' ERR INT
source "$DOTPATH/sync/lib/vitalize.sh"

ANYENV="$ANYENV_PATH/bin/anyenv"
source "$DOTPATH/sync/lang-envs/helper.sh"

log_start 'Anyenv'

if [ -d "$ANYENV_PATH" ]; then
    run git --git-dir="$ANYENV_PATH/.git" --work-tree="$ANYENV_PATH" pull
else
    run git clone https://github.com/riywo/anyenv "$ANYENV_PATH"
    run eval "\"\$($ANYENV init -)\""
    run $ANYENV install --force-init
fi

# Install '**env' tools.
for envpath in "$DOTPATH"/sync/lang-envs/*env; do
    if ! has_env ${envpath##*/}; then
        run $ANYENV install "${envpath##*/}"
    fi
done

# Enable each '**env' command.
run eval "\"\$($ANYENV init -)\""

# Generate anyenv init script beforehand to not slow down the startup time of shells.
# Especially rehash commands are slow while unnecessary in most cases, so we strip them.
# We load it on a shell initialization instead of running `$(anyenv init -)` every time.
mkdir -p "$HOME/.config/anyenv"
$ANYENV init - zsh | sed -E '/^command .+env rehash/d' > "$HOME/.config/anyenv/init.sh"

# Install languages.
for envpath in "$DOTPATH"/sync/lang-envs/*env; do
    source $envpath
done

log_finish 'Anyenv'
