"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Initializing {{{

" Skip initialization if '+eval' feature is disabled.
" :help no-eval-feature
if !1 | finish | endif

" 'compatible' option is disabled automatically when vimrc file is found.
" set nocompatible

" Default properties
let g:is_windows = has('win32') || has('win64')
let g:is_mac     = has('mac')   || has('macunix') || has('gui_macvim')
let g:is_gui     = has('gui_running')
let $MYVIMDIR    = expand( g:is_windows ? '~/vimfiles' : '~/.vim' )
let $VIMLOCAL    = expand($MYVIMDIR . '/local')

" Reset all autocmd defined in vimrc.
" TODO: create ex command to define vimrc autocmd.
augroup vimrc
  autocmd!
augroup END

" Define mapleader before all mappings usiing <Leader>.
let mapleader = "-"
nnoremap - <Nop>

if has('vim_starting')
  autocmd vimrc VimEnter * call <SID>display_startup_time()

  let s:startuptime = reltime()
  function! s:display_startup_time()
    echomsg 'Startup time:' reltimestr( reltime(s:startuptime) )
    unlet s:startuptime
  endfunction
endif

" }}}

" Colorscheme {{{

if has('vim_starting')
  set t_Co =256
  if &t_Co < 256
    colorscheme smyck
  else
    colorscheme smyck256
  endif
endif

" }}}

" Commands and functions {{{

" Reload and Edit .vimrc {{{
command! Rv  source $MYVIMRC | if g:is_gui | source $MYGVIMRC | endif
command! Ev  edit   $MYVIMRC
command! Evg edit   $MYGVIMRC
" }}}

" Set indent easily {{{
command! -nargs=* IndentBy call <SID>set_indent(<f-args>)
command! ShortIndent  IndentBy 2 1
command! MediumIndent IndentBy 4 1

function! s:set_indent(n_space, expand_tab)
  let &l:shiftwidth  = a:n_space
  let &l:tabstop     = a:n_space
  let &l:softtabstop = a:n_space
  let &l:expandtab   = a:expand_tab
endfunction
" }}}

" Mappings {{{

command! -nargs=+ MakeNamedLeader call <SID>make_named_leader(<f-args>)
function! s:make_named_leader(name, key)
  " To avoid conflicting with other mappings starting with '[',
  " use '\' as a prefix.
  let command_name = '\[' . a:name . ']'
  execute 'nnoremap' command_name '<Nop>'
  execute 'nmap' a:key command_name
endfunction

" }}}

" }}}

" Basic options {{{

language C
set helplang =en,ja

set encoding      =utf-8
set fileencoding  =utf-8
set fileencodings =utf-8,cp932

if exists('&ambiwidth')
  set ambiwidth =double
endif

filetype plugin indent on
syntax on

" Default tab/space settings.
set tabstop     =4
set shiftwidth  =4
set softtabstop =4
set expandtab
set autoindent
set smartindent

" Search settings.
set hlsearch
set incsearch
set ignorecase
set smartcase

" Avoid highlighting the last search pattern at reloading vimrc.
nohlsearch

" Disable file backups.
set nobackup
set nowritebackup
set noswapfile

if has('persistent_undo')
  if ! isdirectory($VIMLOCAL . '/undo')
    call mkdir($VIMLOCAL . '/undo')
  endif
  set undofile
  set undodir =$VIMLOCAL/undo
endif

" Briefly jump to the matching bracket.
set showmatch
set matchtime =2
set matchpairs& matchpairs+=<:>

" Folds settings.
set foldmethod =marker
set foldcolumn =3

set cursorline
set number
set relativenumber
set hidden
set ruler
set showcmd
set showmode
set autoread
set nostartofline
set title
set wildmenu
set list
set listchars   =tab:>\ "
set backspace   =indent,eol,start
set linespace   =1
set mouse       =a
set clipboard   =unnamed
set keywordprg  =:help
set scrolloff   =3
set textwidth   =0
set history     =50
set laststatus  =2
set cmdheight   =2
set completeopt =longest,menuone
set whichwrap   =b,s,<,>,[,]
set statusline  =%f%m%r%h%w\ -\ [%{(&fenc!=''?&fenc:&enc)}\ %{&ff}\ %Y]\ [%Llines\]\ (%04l,%04v)
set formatoptions =croql

" Indent counts of leading backslash for line continuations in vim script.
let g:vim_indent_cont = 2

augroup vimrc
  autocmd WinEnter * checktime
augroup END

" }}}

" Filetype settings {{{

" Options for each file type {{{
augroup vimrc
  " Groovy local settings
  autocmd FileType groovy setlocal cindent cinoptions& cinoptions+=j1

  " *.gradle => grooby
  autocmd BufNewFile,BufRead *.gradle setlocal filetype=groovy

  " Show relative line numbers in help files.
  autocmd FileType help setlocal relativenumber
augroup END
" }}}

" Indent settings {{{
augroup vimrc
  autocmd FileType javascript ShortIndent
  autocmd FileType coffee     ShortIndent
  autocmd FileType css        ShortIndent
  autocmd FileType scss       ShortIndent
  autocmd FileType sass       ShortIndent
  autocmd FileType haml       ShortIndent
  autocmd FileType yaml       ShortIndent
  autocmd FileType ruby       ShortIndent
  autocmd FileType vim        ShortIndent
  autocmd FileType c          MediumIndent
  autocmd FileType cs         MediumIndent
  autocmd FileType vb         MediumIndent
  autocmd FileType java       MediumIndent
  autocmd FileType groovy     MediumIndent
  autocmd FileType xml        MediumIndent
  autocmd FileType html       MediumIndent
  autocmd FileType xhtml      MediumIndent
  autocmd FileType eruby      MediumIndent
  autocmd FileType sh         MediumIndent
  autocmd FileType markdown   MediumIndent
augroup END
" }}}

if ! has('vim_starting')
  " Apply file type settings to the current buffer when vimrc is reloaded.
  doautocmd vimrc FileType
endif
" }}}

" Key mappings {{{

" Disable these keys to use as the main leader keys.
nnoremap m       <Nop>
nnoremap q       <Nop>
nnoremap <Space> <Nop>

" Motion {{{

" Numbers {{{

" Invert numbers by <Space> (to type 6 - 9 by left hand).
for s:n in range(1, 9)
  execute 'map <Space>' . s:n . ' ' . (10 - s:n)
endfor
unlet s:n

" }}}

" Insert mode {{{

inoremap <C-j>  <Down>
inoremap <C-k>  <Up>
inoremap <C-h>  <Left>
inoremap <C-l>  <Right>
inoremap <C-a>  <Home>
inoremap <C-e>  <End>
imap     <S-CR> <End><CR>
imap     <C-CR> <C-o>O

" Break undo sequence after these deletions in Insert mode.
inoremap <C-w> <C-g>u<C-w>
inoremap <C-u> <C-g>u<C-u>

" }}}

" Normal mode {{{

" Marks {{{
nnoremap mm m
nnoremap _  `
" }}}

" Fix the direction of the ', ',', 'n', 'N'. {{{

" Make the ';' key always move to the right.
" Make the ',' key always move to the left.
noremap <expr> f <SID>map_repeat_keys_and_move_to_occurrence(1, 'f')
noremap <expr> F <SID>map_repeat_keys_and_move_to_occurrence(0, 'F')
noremap <expr> t <SID>map_repeat_keys_and_move_to_occurrence(1, 't')
noremap <expr> T <SID>map_repeat_keys_and_move_to_occurrence(0, 'T')

" Make the 'n' key always move forward.
" Make the 'N' key always move backward.
noremap <expr> n <SID>search_pattern_to_fixed_direction('n', 'N')
noremap <expr> N <SID>search_pattern_to_fixed_direction('N', 'n')

function! s:map_repeat_keys_and_move_to_occurrence(direct_to_right, command)
  if a:direct_to_right
    noremap ; ;
    noremap , ,
  else
    noremap ; ,
    noremap , ;
  endif
  return a:command
endfunction

function! s:search_pattern_to_fixed_direction(normal_key, reverse_key)
  return v:searchforward ? a:normal_key : a:reverse_key
endfunction

" }}}

" }}}

" Visual mode {{{

" Reselect visual block after indent.
vnoremap < <gv
vnoremap > >gv

" }}}

" Command-line mode {{{

" Like emacs.
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

" }}}

" }}}

" Action {{{

" TODO: Toggles (wrap, expandtab, relativenumber..)
" TODO: Define own 'unimpaired' mappings.

" Customize operations in normal mode. {{{
nnoremap <C-h>     :<C-u>vert help<Space>
nnoremap <Leader>h :<C-u>help<Space>
nnoremap <Space>w  :<C-u>update<CR>
nnoremap <Space>W  :<C-u>update!<CR>
nnoremap <Space>q  :<C-u>quit<CR>
nnoremap <Space>Q  :<C-u>quit!<CR>
nnoremap <C-j> <C-e>gj
nnoremap <C-k> <C-y>gk
nnoremap Y y$
nnoremap Q q
" }}}

" Disallow delete operations to change clipboard except 'd'. {{{
for s:lkey in ['c', 's', 'x']
  let s:ukey = toupper(s:lkey)
  execute 'nnoremap' s:lkey '"_' . s:lkey
  execute 'vnoremap' s:lkey '"_' . s:lkey
  execute 'nnoremap' s:ukey '"_' . s:ukey
  execute 'vnoremap' s:ukey '"_' . s:ukey
endfor

" Leave default operations as 'm[key]'
for s:lkey in ['c', 'x']
  let s:ukey = toupper(s:lkey)
  execute 'nnoremap' 'm' . s:lkey s:lkey
  execute 'vnoremap' 'm' . s:lkey s:lkey
  execute 'nnoremap' 'm' . s:ukey s:ukey
  execute 'vnoremap' 'm' . s:ukey s:ukey
endfor
unlet s:lkey s:ukey

" The 'md' command delete texts without copy. 
nnoremap md "_d
vnoremap md "_d
nnoremap mD "_D
vnoremap mD "_D
" }}}

" Break lines and Insert spaces in normal mode. {{{
nnoremap <S-CR>          o<Esc>
nnoremap <C-CR>          O<Esc>
nnoremap <S-Space>       i<Space><Esc>
nnoremap <Leader><Space> a<Space><Esc>
" }}}

" Paste texts smartly. {{{
inoremap <silent> <C-v> <C-o>:set paste<CR><C-r>*<C-o>:set nopaste<CR>
cnoremap <C-v> <C-r>*
" }}}

" }}}

" Buffers {{{

MakeNamedLeader buffer <Space>b
nnoremap \[buffer]a :<C-u>buffer #<CR>
nnoremap \[buffer]d :<C-u>bdelete<CR>
nnoremap \[buffer]l :<C-u>ls<CR>
nnoremap \[buffer]s :<C-u>ls<CR>:buffer<Space>
nnoremap \[buffer]j :<C-u>execute 'buffer' v:count1<CR>

" }}}

" Tabs {{{

" Use 't' as the prefix of tab motions.
MakeNamedLeader tab t
nnoremap \[tab]n :<C-u>tabnew<CR>
" TODO: mappings for tab motions

" }}}

" Others {{{

" In command mode, paste current path by '%%'.
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') : '%%'

" Reset search highlights.
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Omni completion settings
inoremap <C-Space> <C-x><C-o>
inoremap <expr> <TAB> pumvisible() ? '<C-n>' : '<TAB>'

" }}}

" }}}

" Plugins {{{

call w#neobundle#wrap()

" Declare bundles {{{
function! s:declare_bundles()

  " Extension {{{

  NeoBundlew 'Shougo/vimproc.vim', {
    \ 'disabled': g:is_windows,
    \ 'build': {
    \   'mac'   : 'make -f make_mac.mak',
    \   'linux' : 'make',
    \   'unix'  : 'gmake'
    \   }
    \ }

  NeoBundlew 'Shougo/unite.vim'

  NeoBundlew 'Shougo/neomru.vim', {
    \ 'depends': ['unite']
    \ }

  NeoBundlew 'Shougo/vimfiler.vim', {
    \ 'depends': ['unite']
    \ }

  NeoBundlewLazy 'Shougo/vimshell.vim', {
    \ 'depends': ['vimproc']
    \ }

  NeoBundlew 'Shougo/tabpagebuffer.vim'

  NeoBundlew 'kana/vim-tabpagecd'

  NeoBundlew 'kana/vim-submode'

  NeoBundlew 'tpope/vim-repeat'

  " }}}

  " Editing {{{

  " Basic {{{
  NeoBundlew 'junegunn/vim-easy-align'

  NeoBundlew 'tpope/vim-commentary'

  NeoBundlew 'tpope/vim-surround'

  NeoBundlew 'kana/vim-smartinput'

  NeoBundlew 'cohama/vim-smartinput-endwise'

  NeoBundlew 'LeafCage/yankround.vim'
  " }}}

  " Text object {{{
  NeoBundlew 'kana/vim-textobj-user'

  NeoBundlew 'kana/vim-textobj-entire'

  NeoBundlew 'kana/vim-textobj-line'

  NeoBundlew 'kana/vim-textobj-indent'
  " }}}

  " Operator {{{
  NeoBundlew 'kana/vim-operator-user'

  NeoBundlew 'kana/vim-operator-replace'
  " }}}

  " }}}

  " Motion {{{

  NeoBundlewLazy 'Lokaltog/vim-easymotion', {
    \ 'mappings': '<Plug>'
    \ }

  NeoBundlew 'nelstrom/vim-visual-star-search'

  " }}}

  " Utility {{{

  NeoBundlew 'rbgrouleff/bclose.vim'

  NeoBundlew 'thinca/vim-localrc'

  NeoBundlewLazy 'thinca/vim-quickrun', {
    \ 'commands': ['QuickRun']
    \ }

  NeoBundlewLazy 'kannokanno/previm', {
    \ 'depends': ['open-browser'],
    \ 'filetypes': ['markdown']
    \ }

  NeoBundlewLazy 'tyru/restart.vim', {
    \ 'gui': 1,
    \ 'commands': ['Restart']
    \ }

  NeoBundlewLazy 'tyru/open-browser.vim', {
    \ 'mappings': '<Plug>(openbrowser-'
    \ }

  NeoBundlewLazy 'ryym/macspeech.vim', {
    \ 'disabled': !g:is_mac,
    \ 'commands': ['MacSpeech', 'MacSpeechSelected']
    \ }

  " }}}

  " Filetype {{{

  NeoBundlewLazy 'mattn/emmet-vim', {
    \ 'filetypes': ['html', 'xml', 'eruby', 'jsp']
    \ }
  NeoBundlewLazy 'PProvost/vim-ps1', {
    \ 'filetypes': ['ps1']
    \ }

  NeoBundlewLazy 'kchmck/vim-coffee-script', {
    \ 'filetypes': ['coffee']
    \ }

  " }}}

  " UI {{{

  NeoBundlew 'itchyny/lightline.vim'

  NeoBundlew 'nathanaelkane/vim-indent-guides'

  NeoBundlewLazy 'w0ng/vim-hybrid'

  " }}}

  " Others {{{

  NeoBundlew 'tpope/vim-unimpaired'

  " }}}

endfunction " }}}

" Configure bundles {{{
function! s:configure_bundles(neobundle_wrapper)
  let nbw = a:neobundle_wrapper

  " Extension {{{

  " unite and extentions {{{

  "   unite {{{
  if nbw.tap('unite')
    MakeNamedLeader unite <Space>u
    MakeNamedLeader uniteNq <Space>U

    let s:mappings = [
      \   ['u', 'Unite'                    , '<Space>'],
      \   ['b', 'Unite buffer_tab'         , '<CR>'],
      \   ['f', 'Unite file'               , '<CR>'],
      \   ['r', 'Unite file_rec'           , '<CR>'],
      \   ['o', 'Unite'                    , ' output:'],
      \   ['c', 'UniteWithCurrentDir file' , '<CR>'],
      \   ['C', 'UniteWithCurrentDir'      , '<Space>'],
      \   ['d', 'UniteWithBufferDir file'  , '<CR>'],
      \   ['D', 'UniteWithBufferDir'       , '<Space>'],
      \   ['k', 'UniteWithCursorWord line' , '<CR>'],
      \   ['K', 'UniteWithCursorWord'      , '<Space>']
      \ ]
    for [s:k, s:command, s:end] in s:mappings
      execute 'nnoremap' '\[unite]'   . s:k ':<C-u>' . s:command . s:end
      execute 'nnoremap' '\[uniteNq]' . s:k ':<C-u>' . s:command '-no-quit -winheight=15' . s:end
    endfor
    unlet s:mappings s:k s:command s:end

    function! nbw.hooks.on_source(_)
      " Show dotfiles at :Unite file
      call unite#custom#source('file', 'matchers', 'matcher_default')

      call unite#custom#profile('default', 'context', {
        \ 'start_insert': 1
        \ })

      let g:unite_source_alias_aliases = {
        \ 'f'  : 'file',
        \ 'fr' : 'file_rec',
        \ 'b'  : 'buffer',
        \ 'bt' : 'buffer_tab',
        \ 'g'  : 'grep',
        \ 'l'  : 'line',
        \ 'nb' : 'neobundle'
        \ }

      if executable('ag')
        let g:unite_source_rec_async_command = 'ag --follow --nocolor --nogroup --hidden -g ""'
        let g:unite_source_grep_comand = 'ag'
      endif

      " Key mappings in unite buffers
      autocmd vimrc FileType unite call <SID>map_keys_on_unite()
      function! s:map_keys_on_unite()
        nnoremap <buffer><expr> s unite#smart_map('s', unite#do_action('split'))
        inoremap <buffer><expr> s unite#smart_map('s', unite#do_action('split'))

        nnoremap <buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))
        inoremap <buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))

        nnoremap <buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
        inoremap <buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
      endfunction
    endfunction
  endif
  "   }}}

  "   unite-mru {{{
  if nbw.tap('neomru')
    function! nbw.hooks.on_source(_)
      let g:unite_source_alias_aliases['fm'] = 'file_mru'
    endfunction
  endif
  "   }}}

  " }}}

  " vimfiler {{{
  if nbw.tap('vimfiler')
    MakeNamedLeader vimfiler <Space>f
    nnoremap \[vimfiler]f :<C-u>VimFiler<Space>
    nnoremap \[vimfiler]s :<C-u>VimFiler -split -winwidth=60<Space>
    nnoremap \[vimfiler]c :<C-u>VimFilerCurrentDir<CR>
    nnoremap \[vimfiler]d :<C-u>VimFilerBufferDir<CR>
    nnoremap \[vimfiler]e :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>
    nnoremap \[vimfiler]E :<C-u>VimFiler          -split -simple -winwidth=35 -no-quit<Space>

    function! nbw.hooks.on_source(_)
      let g:vimfiler_as_default_explorer  = 1
      let g:vimfiler_safe_mode_by_default = 0

      " Key mappings in vimfiler buffers
      autocmd vimrc FileType vimfiler call <SID>map_keys_on_vimfiler()
      function! s:map_keys_on_vimfiler()
        " TODO: This conflicts with the default mapping '<Space>'(mark file).
        nmap <buffer> <Space>q <Plug>(vimfiler_exit)

        nmap <silent><buffer><expr> Ar vimfiler#do_action('rec')
      endfunction

    endfunction
  endif
  " }}}

  " vimshell {{{
  if nbw.tap('vimshell')
    MakeNamedLeader vimshell <Space>s
    nnoremap \[vimshell]s :<C-u>VimShell<Space>
    nnoremap \[vimshell]c :<C-u>VimShellCurrentDir<CR>
    nnoremap \[vimshell]d :<C-u>VimShellBufferDir<CR>
  endif
  " }}}

  " submode {{{
  if nbw.tap('submode')
    function! nbw.hooks.on_source(_)
      let g:submode_keep_leaving_key = 1
      let g:submode_timeoutlen       = 3000
    endfunction

    function! nbw.hooks.on_post_source(_)
      " Submode scroll {{{
      call w#submode#define('scroll')
      SbmScrollEnter n <Leader>s
      SbmScroll n <r> u <C-u>
      SbmScroll n <r> d <C-d>
      SbmScroll n <r> f <C-f>
      SbmScroll n <r> b <C-b>
      SbmScroll n j     2<C-e>j
      SbmScroll n k     2<C-y>k
      SbmScroll n J     4<C-e>j
      SbmScroll n K     4<C-y>k
      SbmScroll n <C-j> 6<C-e>j
      SbmScroll n <C-k> 6<C-y>k
      " }}}
      " Submode window-resize {{{
      call w#submode#define('winRes')
      SbmWinResEnter n <C-w>m
      SbmWinResEnter n <C-w><C-m>

      " 'L'ower, 'H'eighten, 'S'horten, 'W'iden
      for [s:k, s:command] in items({
        \ 'l': '<C-w>-',
        \ 'h': '<C-w>+',
        \ 's': '<C-w><',
        \ 'w': '<C-w>>'
        \ })
        execute 'SbmWinRes n' s:k               1 . s:command
        execute 'SbmWinRes n' toupper(s:k)      2 . s:command
        execute 'SbmWinRes n' '<C-' . s:k . '>' 3 . s:command
      endfor
      unlet s:k s:command
      " }}}
    endfunction
  endif
  " }}}

  " }}}

  " Editing {{{

  " easy-align {{{
  if nbw.tap('easy-align')
    vmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
  endif
  " }}}

  " yankround {{{
  if nbw.tap('yankround')
    nmap p     <Plug>(yankround-p)
    xmap p     <Plug>(yankround-p)
    nmap P     <Plug>(yankround-P)
    nmap gp    <Plug>(yankround-gp)
    xmap gp    <Plug>(yankround-gp)
    nmap gP    <Plug>(yankround-gP)
    nmap <C-p> <Plug>(yankround-prev)
    nmap <C-n> <Plug>(yankround-next)
  endif
  " }}}
"
  " operator-replace {{{
  if nbw.tap('operator-replace')
    map mr <Plug>(operator-replace)
  endif
  " }}}

  " smartinput-endwise {{{
  if nbw.tap('smartinput-endwise')
    function! nbw.hooks.on_source(_)
      call smartinput_endwise#define_default_rules()
    endfunction
  endif
  " }}}

  " }}}

  " Motion {{{

  " EasyMotion {{{
  if nbw.tap('easymotion')
    map ms <Plug>(easymotion-s2)
    map mf <Plug>(easymotion-fl2)
    map mF <Plug>(easymotion-Fl2)
    map mt <Plug>(easymotion-tl2)
    map mT <Plug>(easymotion-Tl2)
    map m/ <Plug>(easymotion-fn)
    map m? <Plug>(easymotion-Fn)
    map m; <Plug>(easymotion-next)
    map m, <Plug>(easymotion-prev)

    function! nbw.hooks.on_source(_)
      " Disable default mappings.
      let g:EasyMotion_do_mapping = 0

      let g:EasyMotion_space_jump_first = 1
      let g:EasyMotion_smartcase        = 1
      let g:EasyMotion_use_upper        = 1
      let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

      highlight link EasyMotionIncSearch    Search
      highlight link EasyMotionTarget       ErrorMsg
      highlight link EasyMotionShade        Comment
      highlight link EasyMotionTarget2First Todo
    endfunction
  endif
  " }}}

  " }}}

  " Utility {{{

  " bclose {{{
  if nbw.tap('bclose')
    nnoremap \[buffer]d :<C-u>Bclose<CR>
    nnoremap \[buffer]D :<C-u>Bclose!<CR>
  endif
  " }}}

  " quick-run {{{
  if nbw.tap('quickrun')
    nnoremap <Leader>r :QuickRun<CR>
    vnoremap <Leader>r :QuickRun<CR>
  endif
  " }}}

  " open-browser {{{
  if nbw.tap('open-browser')
    nmap <Leader>obo <Plug>(openbrowser-open)
    vmap <Leader>obo <Plug>(openbrowser-open)
    nmap <Leader>obs <Plug>(openbrowser-search)
    vmap <Leader>obs <Plug>(openbrowser-search)
  endif
  " }}}

  " restart {{{
    if nbw.try_tap('restart')
      " This doesn't work under the terminal.
      nnoremap <Leader><Leader>r :<C-u>Restart<CR>
      nnoremap <Leader><Leader>R :<C-u>Restart!<CR>
    endif
  " }}}

  " macspeech {{{
  if nbw.try_tap('macspeech')
    vnoremap <Leader><Leader>q :MacSpeechSelected<CR>
    nnoremap <Leader><Leader>Q :<C-u>MacSpeechStop<CR>
    vnoremap <Leader><Leader>Q :<C-u>MacSpeechStop<CR>
  endif
  " }}}

  " }}}

  " UI {{{

  " indent-guides {{{
  if nbw.tap('indent-guides')
    function! nbw.hooks.on_source(_)
      let g:indent_guides_start_level = 2
      let g:indent_guides_guide_size  = 1
      if g:is_gui
        autocmd vimrc VimEnter * IndentGuidesEnable
      endif
    endfunction
  endif
  " }}}

  " lightline {{{
  if nbw.tap('lightline')
    if ! has('vim_starting')
      " Override default statusline when vimrc is reloaded.
      call lightline#update()
    endif
  endif
  " }}}

  " }}}

endfunction " }}}

" Load bundles by NeoBundle. {{{

call w#neobundle#execute({
  \   'vimrc'             : $MYVIMRC,
  \   'bundle_dir'        : $MYVIMDIR  . '/bundle',
  \   'declare_bundles'   : function('s:declare_bundles'),
  \   'configure_bundles' : function('s:configure_bundles')
  \ })

" }}}

" Another plugins {{{

runtime macros/matchit.vim

" }}}

if ! has('vim-starting')
  " Todo: neobundle call on_source
endif

" }}}

" Local settings {{{

if filereadable($VIMLOCAL . '/vimrc')
  source $VIMLOCAL/vimrc
endif

" }}}

" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
